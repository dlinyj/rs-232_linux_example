NAME
       read - read from a file descriptor

SYNOPSIS
       #include <unistd.h>

       ssize_t read(int fd, void *buf, size_t count);

DESCRIPTION
       read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf.

       On  files  that support seeking, the read operation commences at the current file offset, and the file offset is incremented by the number of bytes
       read.  If the current file offset is at or past the end of file, no bytes are read, and read() returns zero.

       If count is zero, read() may detect the errors described below.  In the absence of any errors, or if read() does not check  for  errors,  a  read()
       with a count of 0 returns zero and has no other effects.

       If count is greater than SSIZE_MAX, the result is unspecified.

RETURN VALUE
       On  success,  the  number  of  bytes read is returned (zero indicates end of file), and the file position is advanced by this number.  It is not an
       error if this number is smaller than the number of bytes requested; this may happen for example because fewer bytes are  actually  available  right
       now (maybe because we were close to end-of-file, or because we are reading from a pipe, or from a terminal), or because read() was interrupted by a
       signal.  See also NOTES.

       On error, -1 is returned, and errno is set appropriately.  In this case, it is left unspecified whether the file position (if any) changes.

ERRORS
       EAGAIN The file descriptor fd refers to a file other than a socket and has been marked nonblocking (O_NONBLOCK), and the  read  would  block.   See
              open(2) for further details on the O_NONBLOCK flag.

       EAGAIN or EWOULDBLOCK
              The  file  descriptor  fd  refers  to  a socket and has been marked nonblocking (O_NONBLOCK), and the read would block.  POSIX.1-2001 allows
              either error to be returned for this case, and does not require these constants to have the same value, so  a  portable  application  should
              check for both possibilities.

       EBADF  fd is not a valid file descriptor or is not open for reading.

       EFAULT buf is outside your accessible address space.

